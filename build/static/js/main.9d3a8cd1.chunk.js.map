{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","contents","setContents","refresh","_refresh","apply","this","arguments","asyncToGenerator","regenerator_default","a","mark","_callee","result","direction","times","directions","time1","time2","wrap","_context","prev","next","axios","get","sent","data","predictions","Array","isArray","push","forEach","pred","prediction","array","p","parseInt","minutes","sort","length","react_default","createElement","className","stop","useEffect","timer","setInterval","clearInterval","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRA6EeA,MAzEf,WAAe,IAAAC,EACmBC,mBAAS,MAD5BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACII,EADJJ,EAAA,YAGEK,IAHF,OAAAC,EAAAC,MAAAC,KAAAC,WAAA,SAAAH,IAAA,OAAAA,EAAAL,OAAAS,EAAA,EAAAT,CAAAU,EAAAC,EAAAC,KAGb,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAT,EAAAC,EAAAS,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAIuBC,IAAMC,IAFzB,kGAFJ,OAIQX,EAJRO,EAAAK,MAMQX,EAAYD,EAAOa,KAAKC,YAAYb,aAGlCC,EAAQ,GAEVC,EAAa,GACZY,MAAMC,QAAQf,GAGjBE,EAAaF,EAFbE,EAAWc,KAAKhB,GAKlBE,EAAWe,QAAQ,SAAAjB,GACjB,IAAMkB,EAAOlB,EAAUmB,WACnBC,EAAQ,GAEPN,MAAMC,QAAQG,GAGjBE,EAAQF,EAFRE,EAAMJ,KAAKE,GAKbE,EAAMH,QAAQ,SAAAI,GACZpB,EAAMe,KAAKM,SAASD,EAAEE,cAItBpB,EAAQ,GACRC,EAAQ,GAEZH,EAAMuB,OAEFvB,EAAMwB,OAAS,IACjBtB,EAAQF,EAAM,GAAK,QAEjBA,EAAMwB,OAAS,IACjBrB,EAAQH,EAAM,GAAK,QAGrBb,EACEsC,EAAA9B,EAAA+B,cAAA,OAAKC,UAAU,aACbF,EAAA9B,EAAA+B,cAAA,OAAKC,UAAU,SAAf,aACAF,EAAA9B,EAAA+B,cAAA,OAAKC,UAAU,QAAQzB,GACvBuB,EAAA9B,EAAA+B,cAAA,OAAKC,UAAU,QAAQxB,MAjD/B,wBAAAE,EAAAuB,SAAA/B,OAHaP,MAAAC,KAAAC,WAsEb,OAZAqC,oBAAU,WACRzC,IAEA,IAAM0C,EAAQC,YAAY,WACxB3C,KACC,KAEH,OAAO,WACL4C,cAAcF,KAEf,IAEIL,EAAA9B,EAAA+B,cAAA,OAAKC,UAAU,OAAOzC,IC9DX+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAA9B,EAAA+B,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9d3a8cd1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [contents, setContents] = useState(null);\n\n  async function refresh() {\n    const inbound =\n      \"http://webservices.nextbus.com/service/publicJSONFeed?command=predictions&a=sf-muni&r=N&s=5206\";\n\n    const result = await axios.get(inbound);\n\n    const direction = result.data.predictions.direction;\n\n    if (direction) {\n      const times = [];\n\n      let directions = [];\n      if (!Array.isArray(direction)) {\n        directions.push(direction);\n      } else {\n        directions = direction;\n      }\n\n      directions.forEach(direction => {\n        const pred = direction.prediction;\n        let array = [];\n\n        if (!Array.isArray(pred)) {\n          array.push(pred);\n        } else {\n          array = pred;\n        }\n\n        array.forEach(p => {\n          times.push(parseInt(p.minutes));\n        });\n      });\n\n      let time1 = \"\";\n      let time2 = \"\";\n\n      times.sort();\n\n      if (times.length > 0) {\n        time1 = times[0] + \" min\";\n      }\n      if (times.length > 1) {\n        time2 = times[1] + \" min\";\n      }\n\n      setContents(\n        <div className=\"container\">\n          <div className=\"route\">N Inbound</div>\n          <div className=\"time\">{time1}</div>\n          <div className=\"time\">{time2}</div>\n        </div>\n      );\n    }\n  }\n\n  useEffect(() => {\n    refresh();\n\n    const timer = setInterval(() => {\n      refresh();\n    }, 30000);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return <div className=\"App\">{contents}</div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}