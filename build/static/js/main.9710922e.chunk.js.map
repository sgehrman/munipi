{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","contents","setContents","trainTimes","_x","_trainTimes","apply","this","arguments","asyncToGenerator","regenerator_default","a","mark","_callee","line","inbound","result","direction","times","directions","wrap","_context","prev","next","concat","axios","get","sent","data","predictions","Array","isArray","push","forEach","pred","prediction","array","p","parseInt","minutes","abrupt","stop","refresh","_refresh","_callee2","nTimes","nOwlTimes","time1","time2","_context2","sort","b","length","react_default","createElement","className","useEffect","timer","setInterval","clearInterval","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRA+FeA,MA3Ff,WAAe,IAAAC,EACmBC,mBAAS,MAD5BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACII,EADJJ,EAAA,YAGEK,EAHFC,GAAA,OAAAC,EAAAC,MAAAC,KAAAC,WAAA,SAAAH,IAAA,OAAAA,EAAAN,OAAAU,EAAA,EAAAV,CAAAW,EAAAC,EAAAC,KAGb,SAAAC,EAA0BC,GAA1B,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAT,EAAAC,EAAAS,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACQR,EADR,yFAAAS,OAC2GV,EAD3G,WAAAO,EAAAE,KAAA,EAGuBE,IAAMC,IAAIX,GAHjC,UAGQC,EAHRK,EAAAM,OAKQV,EAAYD,EAAOY,KAAKC,YAAYZ,WAL5C,CAAAI,EAAAE,KAAA,gBAQUL,EAAQ,GAEVC,EAAa,GACZW,MAAMC,QAAQd,GAGjBE,EAAaF,EAFbE,EAAWa,KAAKf,GAKlBE,EAAWc,QAAQ,SAAAhB,GACjB,IAAMiB,EAAOjB,EAAUkB,WACnBC,EAAQ,GAEPN,MAAMC,QAAQG,GAGjBE,EAAQF,EAFRE,EAAMJ,KAAKE,GAKbE,EAAMH,QAAQ,SAAAI,GACZnB,EAAMc,KAAKM,SAASD,EAAEE,cA5B9BlB,EAAAmB,OAAA,SAgCWtB,GAhCX,eAAAG,EAAAmB,OAAA,SAmCS,IAnCT,yBAAAnB,EAAAoB,SAAA5B,OAHaP,MAAAC,KAAAC,WAAA,SAyCEkC,IAzCF,OAAAC,EAAArC,MAAAC,KAAAC,WAAA,SAAAmC,IAAA,OAAAA,EAAA5C,OAAAU,EAAA,EAAAV,CAAAW,EAAAC,EAAAC,KAyCb,SAAAgC,IAAA,IAAAC,EAAAC,EAAA5B,EAAA6B,EAAAC,EAAA,OAAAtC,EAAAC,EAAAS,KAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,cAAA0B,EAAA1B,KAAA,EACuBpB,EAAW,KADlC,cACQ0C,EADRI,EAAAtB,KAAAsB,EAAA1B,KAAA,EAE0BpB,EAAW,SAFrC,OAEQ2C,EAFRG,EAAAtB,KAIQT,EAAQ2B,EAAOrB,OAAOsB,GAExBC,EAAQ,GACRC,EAAQ,GAEZ9B,EAAMgC,KAAK,SAASvC,EAAGwC,GACrB,OAAOxC,EAAIwC,IAGTjC,EAAMkC,OAAS,IACjBL,EAAQ7B,EAAM,IAEZA,EAAMkC,OAAS,IACjBJ,EAAQ9B,EAAM,IAGhBhB,EACEmD,EAAA1C,EAAA2C,cAAA,OAAKC,UAAU,aACbF,EAAA1C,EAAA2C,cAAA,OAAKC,UAAU,SAAf,aACAF,EAAA1C,EAAA2C,cAAA,OAAKC,UAAU,QACZR,EACDM,EAAA1C,EAAA2C,cAAA,QAAMC,UAAU,QAAhB,SAEFF,EAAA1C,EAAA2C,cAAA,OAAKC,UAAU,QACZP,EACDK,EAAA1C,EAAA2C,cAAA,QAAMC,UAAU,QAAhB,WA7BR,yBAAAN,EAAAR,SAAAG,OAzCatC,MAAAC,KAAAC,WAwFb,OAZAgD,oBAAU,WACRd,IAEA,IAAMe,EAAQC,YAAY,WACxBhB,KACC,KAEH,OAAO,WACLiB,cAAcF,KAEf,IAEIJ,EAAA1C,EAAA2C,cAAA,OAAKC,UAAU,OAAOtD,IChFX2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAA1C,EAAA2C,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9710922e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.scss'\nimport axios from 'axios'\n\nfunction App() {\n  const [contents, setContents] = useState(null)\n\n  async function trainTimes(line) {\n    const inbound = `http://webservices.nextbus.com/service/publicJSONFeed?command=predictions&a=sf-muni&r=${line}&s=5206`\n\n    const result = await axios.get(inbound)\n\n    const direction = result.data.predictions.direction\n\n    if (direction) {\n      const times = []\n\n      let directions = []\n      if (!Array.isArray(direction)) {\n        directions.push(direction)\n      } else {\n        directions = direction\n      }\n\n      directions.forEach(direction => {\n        const pred = direction.prediction\n        let array = []\n\n        if (!Array.isArray(pred)) {\n          array.push(pred)\n        } else {\n          array = pred\n        }\n\n        array.forEach(p => {\n          times.push(parseInt(p.minutes))\n        })\n      })\n\n      return times\n    }\n\n    return []\n  }\n\n  async function refresh() {\n    const nTimes = await trainTimes('N')\n    const nOwlTimes = await trainTimes('N_OWL')\n\n    const times = nTimes.concat(nOwlTimes)\n\n    let time1 = ''\n    let time2 = ''\n\n    times.sort(function(a, b) {\n      return a - b\n    })\n\n    if (times.length > 0) {\n      time1 = times[0]\n    }\n    if (times.length > 1) {\n      time2 = times[1]\n    }\n\n    setContents(\n      <div className='container'>\n        <div className='route'>N Inbound</div>\n        <div className='time'>\n          {time1}\n          <span className='mins'> min</span>\n        </div>\n        <div className='time'>\n          {time2}\n          <span className='mins'> min</span>\n        </div>\n      </div>\n    )\n  }\n\n  useEffect(() => {\n    refresh()\n\n    const timer = setInterval(() => {\n      refresh()\n    }, 30000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [])\n\n  return <div className='App'>{contents}</div>\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}